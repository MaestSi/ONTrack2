/*
 * -------------------------------------------------
 *  MaestSi/ONTrack2 Nextflow config file
 * -------------------------------------------------
 */
 
params {
    // Path to fastq files, use wildcards to select multiple samples
    fastq_files = "/path/to/samples*fastq"
 
    // Path to a folder where to store results
    results_dir = "/path/to/results_dir"

    //scripts_dir is the directory containing all scripts
    scripts_dir = "/path/to/scripts_dir"

    //subsampling_flag = true if you want to perform reads subsampling to reduce running time
    subsampling_flag = true

    //subsampled_reads is the number of subsampled reads for each sample in case subsampling_flag = true
    subsampled_reads = 5000

    //min Q value for reads filtering
    minQ = 7

    //min read length for reads filtering
    minLen = 200

    //max read length for reads filtering
    maxLen = 1500

    //target_reads_consensus defines the maximum number of reads used for consensus calling
    target_reads_consensus = 200

    //target_reads_polishing defines the maximum number of reads used for consensus polishing
    target_reads_polishing = 200

    //identity threshold for clustering preliminary allele assembly
    clustering_id_threshold = 0.7

    //MAFFT plurality value: minimum fraction of aligned reads supporting a basis for including it in the preliminary consensus
    plurality = 0.15

    //set fast_alignment_flag=1 if you want to perform fast multiple sequence alignment; otherwise set fast_alignment_flag=0
    fast_alignment_flag = 1

    //primers_length defines how many bases are trimmed from consensus sequences
    primers_length = 25
    
    //medaka model
    medaka_model = "r941_min_sup_g507"

    //Blast-indexed database for Blasting consensus sequences
    blast_db = "/path/to/NCBI_nt_db/nt"

    help = false

    // Flags to select which process to run
    readsFiltering = true
    readsClustering = true
    draftConsensusCalling = true
    consensusPolishing = true
    blastSearch = true
}

profiles {
	singularity {
	    singularity.enabled = true
	    singularity.autoMounts = false
	    //singularity.cacheDir = "/path/to/singularity/cacheDir" // if commented, work dir is going to be used
	    process {
	    cpus = 1
	    executor = 'pbspro' // set to 'local' if you are not using a queue management system
	    queue = 'workq'
	    perJobMemLimit = true
	    queueStatInterval = '1 ms'
	    pollInterval = '1 ms'
	    container = 'maestsi/ontrack2:latest'
	    containerOptions = '--bind /home:/home' // adjust according to which directory you wish to make accessible to singularity

	    withName:readsFiltering {
	    	cpus = { params.readsFiltering ? 1 : 1 }
	    	memory = { params.readsFiltering ? 10.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:readsClustering {
	    	cpus = { params.readsClustering ? 4 : 1 }
	    	memory = { params.readsClustering ? 10.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:draftConsensusCalling {
	    	cpus = { params.draftConsensusCalling ? 4 : 1 }
	    	memory = { params.draftConsensusCalling ? 30.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:consensusPolishing {
	    	cpus = { params.consensusPolishing ? 4 : 1 }
	    	memory = { params.consensusPolishing ? 20.GB + (2.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:blastSearch {
	    	cpus = { params.blastSearch ? 4 : 1 }
	    	memory = { params.blastSearch ? 20.GB + (2.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    }
    }
    docker {
	    docker.enabled = true
	    docker.autoMounts = false
	    //docker.cacheDir = "/path/to/docker/cacheDir" // if commented, work dir is going to be used
	    process {
	    cpus = 1
	    executor = 'local'
        container = 'maestsi/ontrack2:latest'
	    containerOptions = '-v /Users/:/Users' // adjust according to which directory you wish to make accessible to docker

	    withName:readsFiltering {
	    	cpus = { params.readsFiltering ? 1 : 1 }
	    	memory = { params.readsFiltering ? 10.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:readsClustering {
	    	cpus = { params.readsClustering ? 4 : 1 }
	    	memory = { params.readsClustering ? 10.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:draftConsensusCalling {
	    	cpus = { params.draftConsensusCalling ? 4 : 1 }
	    	memory = { params.draftConsensusCalling ? 10.GB + (5.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:consensusPolishing {
	    	cpus = { params.consensusPolishing ? 4 : 1 }
	    	memory = { params.consensusPolishing ? 10.GB + (2.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
	    withName:blastSearch {
	    	cpus = { params.blastSearch ? 4 : 1 }
	    	memory = { params.blastSearch ? 10.GB + (2.GB * (task.attempt-1)) : 1.GB }
	    	errorStrategy = { task.exitStatus == 137 ? 'retry' : 'terminate' }
	    	maxRetries = 3
	    }
        }
    }    
}

tower {
	enabled = false
	endpoint = '-'
	accessToken = 'insert access token'
}